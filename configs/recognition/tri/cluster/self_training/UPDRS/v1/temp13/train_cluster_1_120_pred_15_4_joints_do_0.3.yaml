argparse_cfg:
  gpus:
    bind_to: processor_cfg.gpus
    help: number of gpus
  work_dir:
    bind_to: processor_cfg.work_dir
    help: the dir to save logs and models
  batch_size:
    bind_to: processor_cfg.batch_size
  resume_from:
    bind_to: processor_cfg.resume_from
    help: the checkpoint file to resume from


processor_cfg:
  type: 'processor.recognition_tri_self_training_v2.train'
  workers: 1
  test_ids: [34, 37, 27, 47, 39, 46, 48, 50, 52, 55, 57, 59, 66, 33]
  cv: 5
  exclude_cv: False
  notes: "two_part_loss"
  group_notes: "TESTv2"
  weight_classes: True
  flip_loss: 0
  launch_from_local: False
  wandb_project: "UPDRS_selftrain_v1_sept15"
  early_stopping: True
  force_run_all_epochs: False
  es_patience_1: 25
  es_start_up_1: 10
  es_patience_2: 25
  es_start_up_2: 25
  train_extrema_for_epochs: 25
  do_position_pretrain: True
  freeze_encoder: False
  head: "stgcn"
  model_increase_iters: [1, 2, 4, 6, 8]
  model_increase_mults: [1, 1, 2, 1, 1]
  num_self_train_iter: 5

  # model setting
  model_cfg:
    type: 'models.backbones.ST_GCN_18_ordinal_orig_position_pretrain_dynamic_v1'
    in_channels: 2
    num_class: 4 
    edge_importance_weighting: True
    dropout: 0.3
    num_ts_predicting: 1
    num_joints_predicting: 4
    temporal_kernel_size: 13

    graph_cfg:
      layout: 'coco_simplified_head_ankles_ankle_wrists'
      strategy: 'spatial'
  loss_cfg:
    - {type: 'mmskeleton.processor.utils_recognition.WingLoss'} # This is for pretraining
    - {type: 'torch.nn.MSELoss'} # This is for finetuning
    # - {type: 'torch.nn.MSELoss'} # This is for finetuning
    

  # dataset setting
  dataset_cfg:
    # ALL data
    - type: "datasets.DataPipeline"
      data_source:
        type: "datasets.SkeletonLoaderTRI"
        data_dir: skel_data/stgcn_normalized_100_center_all_no_norm_plus_belmont
        num_track: 1
        num_keypoints: 13
        repeat: 1
        outcome_label: UPDRS_gait
        csv_loader: True
        missing_joint_val: mean
        cache: True
        flip_skels: True

      pipeline:
        - {type: "datasets.skeleton.normalize_by_resolution"}
        - {type: "datasets.skeleton.mask_by_visibility"}       
        - {type: "datasets.skeleton.scale_walk"}      # Optional
        - {type: "datasets.skeleton.shear_walk"}   
        - {type: "datasets.skeleton.pad_zero_beginning_for_joint_prediction", size: 120, pred_ts: [15]  }
        - {type: "datasets.skeleton.random_crop_for_joint_prediction", size: 120, pred_ts: [15] }
        - {type: "datasets.skeleton.select_joints_for_label", joints: [5, 6, 11, 12]}
        - {type: "datasets.skeleton.transpose", order: [0, 2, 1, 3]}
        - {type: "datasets.skeleton.to_tuple"}

    # PD labelled data
    - type: "datasets.DataPipeline"
      data_source:
        type: "datasets.SkeletonLoaderTRI"
        data_dir: skel_data/stgcn_normalized_100_center_pd_no_norm
        num_track: 1
        num_keypoints: 13
        repeat: 1
        outcome_label: UPDRS_gait
        csv_loader: True
        missing_joint_val: mean
        cache: True
        flip_skels: True

    # This is for fine-tuning
      pipeline:
        - {type: "datasets.skeleton.normalize_by_resolution"}
        - {type: "datasets.skeleton.mask_by_visibility"}
        - {type: "datasets.skeleton.scale_walk"}      # Optional
        - {type: "datasets.skeleton.shear_walk"}   
        - {type: "datasets.skeleton.pad_zero_beginning", size: 120 }
        - {type: "datasets.skeleton.random_crop", size: 120 }
        - {type: "datasets.skeleton.transpose", order: [0, 2, 1, 3]}
        - {type: "datasets.skeleton.to_tuple"}


  # dataloader setting
  batch_size: 100
  gpus: 1

  # optimizer setting
  # optimizer setting
  optimizer_cfg:
    # Pretrain
    - {type: 'torch.optim.SGD',
    lr: 0.0001,
    momentum: 0.9,
    nesterov: true,
    weight_decay: 0.00001}

    # Fine tuning
    - {type: 'torch.optim.SGD',
    lr: 0.001,
    momentum: 0.9,
    nesterov: true,
    weight_decay: 0.00001}

  # runtime setting
  workflow: [['train', 1], ['val', 1], ['test', 1]]
  work_dir: ./work_dir/recognition/tri_all/dataset_example/cnn/SAS/SAS_1_120_bn_do_0.0
  total_epochs: 200
  training_hooks:
    lr_config:
      policy: 'cyclic'
      cyclic_times: 10
      step_ratio_up: 0.2
      target_ratio: !!python/tuple [10, 0.00001]
      anneal_ratio: 5
    log_config:
      interval: 100
      hooks:
        - type: WandbLoggerHook
    checkpoint_config:
      interval: 200
    optimizer_config:
      grad_clip: 
  resume_from:
  load_from:
